article.wow.fadeInDown(data-role='textInputs')
  h1 Text inputs
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2015/03/18/inspiration-text-input-effects-2/', target='_blank') Codrops
  section.wow.fadeInDown
    h2 Jiro
    p This first example shows you how to use the Jiro plugin for a text input:
    figure(data-role='jiro')
      span.input
        input(type='email', id='username', name='username', autocapitalize='off', minlength='5', maxlength='200')
        label(for='username'): span Your email
    p Usage in <b>Stylus</b>
    pre: code.stylus.
      @import s(basePath, input)
      cpInput(bgColor, textColor, brandColor)
      // Here is the Jiro plugin
      cpInputJiro(textColor, brandColor)
    p Usage in <b>Jade</b>
    pre: code.jade.
      span.input
        input(type='email', id='username', name='username')
        label(for='username'): span Your email
    p Usage in <b>Coffee</b>
    pre: code.coffee.
      Template.myForm.rendered = ->
        Meteor.setTimeout ->
          @$ 'input[type=\'email\']'
          .each (idx, el) =>
            $el = @$ el
            $el.addClass 'filled' unless $el.val().length is 0
        , 300
      Template.myForm.events
        'focus input[type=\'email\']': (e, t) ->
          (t.$ e.target).addClass 'filled'
        'blur input[type=\'email\']': (e, t) ->
          (t.$ e.target).removeClass 'filled' if e.target.value.length is 0  
  section.wow.fadeInDown
    h2 Haruki
    p This second example shows you how to use the Haruki plugin for a text input:
    figure(data-role='haruki')
      span.input
        input(type='email', id='username', name='username', autocapitalize='off', minlength='5', maxlength='200')
        label(for='username'): span Your email
    p The only difference in usage is in the <b>Stylus</b>:
    pre: code.stylus.
      // Here is the Haruki plugin
      cpInputHaruki(textColor, brandColor)

  section.wow.fadeInDown
    h2 Hoshi
    p This third example shows you how to use the Hoshi plugin for a text input:
    figure(data-role='hoshi')
      span.input
        input(type='email', id='username', name='username', autocapitalize='off', minlength='5', maxlength='200')
        label(for='username'): span Your email
    p As before, the only difference in usage is in the <b>Stylus</b>:
    pre: code.stylus.
      // Here is the Hoshi plugin
      cpInputHoshi(textColor, brandColor)

  section.wow.fadeInDown
    h2 Yoko
    p This fourth example shows you how to use the Yoko plugin for a text input:
    figure(data-role='yoko')
      span.input
        input(type='email', id='username', name='username', autocapitalize='off', minlength='5', maxlength='200')
        label(for='username'): span Your email
    p As before, the only difference in usage is in the <b>Stylus</b>:
    pre: code.stylus.
      // Here is the Yoko plugin
      cpInputYoko(textColor, brandColor)

article.wow.fadeInDown(data-role='buttons', data-content='small-buttons')
  h1 Small buttons <small>with clicked animations</small>
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2015/02/11/subtle-click-feedback-effects/', target='_blank') Codrops
  h2 Boris
  p.
    The first example shows how to use the Boris plugins for small buttons.
    Click on the button to see the click / touch effect.
  figure(data-role='small', data-content='boris')
    button.small(type='button')
      i.fa.fa-chevron-circle-right.fa-2x
      span Access
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, buttonSmall)
    cpButtonSmall(brandColor)
    // The Boris plugin
    cpButtonSmallBoris(brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    button.small(type='button')
      i.fa.fa-chevron-circle-right.fa-2x
      span Access
  p Usage in <b>Coffee</b>
  pre: code.coffee.
    Template.myForm.events
      'click button': (e, t) ->
        $button = t.$ e.target
        $button.addClass 'clicked'
        $button.on ANIMATION_END_EVENT, ->
          $button
            .off ANIMATION_END_EVENT
            .removeClass 'clicked'
          NowDoSomething()
  h2 Ivana
  p The second example shows you how to use the Ivana plugin:
  figure(data-role='small', data-content='ivana')
    button.small#access(type='button')
      i.fa.fa-chevron-circle-right.fa-2x
      span Access
  p The only difference in usage is in the <b>Stylus</b>:
  pre: code.stylus.
    // The Ivana plugin
    cpButtonSmallIvana(brandColor)

article.wow.fadeInDown(data-role='buttons', data-content='creative-buttons')
  h1 Creative buttons
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2013/06/13/creative-button-styles/', target='_blank') Codrops
  h2 Round
  p.
    These huge buttons are simple ones with icons on them. The first flavour is
    a rounded button that gets a bit darker when hovering upon.
  figure(data-role='creative', data-content='round')
    button.creative(data-role='add') Add something
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, buttonCreative)
    cpButtonCreative(bgColor, brandColor)
    // The Round plugin
    cpButtonCreativeRound(brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    button.creative(data-role='add') Add something
  h3 Round & whiten
  p.
    Not far from the former one, the round whiten plugin adds a bit of contrast
    with a subtle hover effect leading the user to the message it carries.
  figure(data-role='creative', data-content='roundwhiten')
    button.creative(data-role='validate') Validate to go further
  p The only difference in usage is in the <b>Stylus</b>:
  pre: code.stylus.
    // The Round & Whiten plugin
    cpButtonCreativeRoundWhiten(brandColor)
  h3 Vertical
  p Buttons doesn't have to be horizontal.
  figure(data-role='creative', data-content='vertical')
    button.creative(data-role='user') Modify your profile
  p As before, the only difference in usage is in the <b>Stylus</b>:
  pre: code.stylus.
    // The Vertical plugin
    cpButtonCreativeVertical(brandColor)

article.wow.fadeInDown(data-role='buttons', data-content='inspiration-buttons')
  h1 Inspiration buttons <small>with clicked animations</small>
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/', target='_blank') Codrops
  h2 Tamaya
  p.
    In this third button installment, we provide buttons with click animation.
  figure(data-role='inspiration', data-content='tamaya')
    button.inspiration(type='button', data-text='Hover me or click me')
      span Hover me or click me
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, buttonInspiration)
    cpButtonInspiration(brandColor)
    // The Tamaya plugin
    cpButtonInspirationTamaya(brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    button.inspiration(type='button', data-text='Some text')
      span Some text
  p Note that to avoid repeating yourself with the 
    code data-text
    | attribute and the
    code span
    | content, you can use Blaze to define the text content.
  p Usage in <b>Coffee</b>
  pre: code.coffee.
    Template.myForm.events
      'click button': (e, t) ->
        $button = t.$ e.target
        $button.addClass 'clicked'
        $button.on TRANSITION_END_EVENT, ->
          $button
            .off TRANSITION_END_EVENT
            .removeClass 'clicked'
          NowDoSomething()
  h2 Ujarak
  p The second example shows you how to use the Ujarak plugin.
  p Note that this plugin doesn't use the
    code data-text
    | attribute but is fully compatible with the former plugin.
  figure(data-role='inspiration', data-content='ujarak')
    button.inspiration(type='button', data-text='Hover me or click me')
      span Hover me or click me
  p The only difference in usage is in the <b>Stylus</b>:
  pre: code.stylus.
    // The Ujarak plugin
    cpButtonInspirationUjarak(bgColor, brandColor)
  h2 Winoma
  p The third example shows you how to use the Winoma plugin.
  figure(data-role='inspiration', data-content='winoma')
    button.inspiration(type='button', data-text='Hover me or click me')
      span Hover me or click me
  p The only difference in usage is in the <b>Stylus</b>:
  pre: code.stylus.
    // The Winoma plugin
    cpButtonInspirationWinoma(bgColor, brandColor)

article.wow.fadeInDown(data-role='checkbox')
  h1 Checkbox
  p.
    For your forms, you can use checkbox as animated switches using
    your main color scheme.
  figure
    span.checkbox
      label(for='switch') Put it on?
      input(type='checkbox', id='switch', name='switch')
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, checkbox)
    cpCheckbox(bgColor, brandSuccess, brandDanger, brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    span.checkbox
      label(for='switch') Put it on?
      input(type='checkbox', id='switch', name='switch')

article.wow.fadeInDown(data-role='select')
  h1 Select
  p.
    Still for your forms, select are animated and customizable with your main
    color scheme.
  figure
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p.
    We first start by setting a reactive variable as a the content receiver for
    the selected value.
  pre: code.bash.
    meteor add reactive-var
  p <b>Stylus</b> is like every other except that the container is a flexbox.
  pre: code.stylus.
    @import s(basePath, selectCustom)
    cpCheckbox(bgColor, brandSuccess, brandDanger, brandColor)
  p The <b>Jade</b> file isn't a select, it's a custom set of tags:
  pre: code.jade.
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p The <b>Coffee</b> file requires the setup of a reactive var:
  pre: code.coffee.
    Template.others.created = ->
      @rxCivility = new ReactiveVar
      @rxCivility.set ''
      @autorun (computation) =>
        civility = @rxCivility.get()
        unless computation.firstRun
          $selectCustom = @$ '.select-custom'
          $selectCustom.addClass 'filled'
    Template.others.helpers
      selectedCivility: -> Template.instance().rxCivility.get()
      civility: -> ['Mr', 'Mrs', 'Ms', 'Dr']
    Template.others.events
      'click .select-custom li': (e, t) ->
        t.rxCivility.set e.target.textContent
