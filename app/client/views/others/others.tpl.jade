article.wow.fadeInDown(data-role='iron-router')
  h1 Iron router
  p This small styles eases the customization of Iron router progress.
  pre: code.bash.
    meteor add iron:router multiply:iron-router-progress
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, ironprogress)

article.wow.fadeInDown(data-role='goo')
  h1 Gooey effect
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/', target='_blank') Codrops
  p The Gooey effect blends shapes when they are closed to each other.
  p
    i.fa.fa-warning
    | This effect only works on Chrome desktop and Chrome Android.
  figure(data-role='gooey')
    +goo
    .menu
      .item.twitter: span.fa.fa-twitter
      .item.facebook: span.fa.fa-facebook
      .item.plus: span.fa.fa-plus
      .item.weibo: span.fa.fa-weibo
      .item.pinterest: span.fa.fa-pinterest
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, goo)
    // Apply the Gooey filter on a container
    .container
      cpGoo()
  p Usage in <b>Jade</b>
  pre: code.jade.
    .container
      // Include the SVG used for the Gooey filtering
      +goo
        // The filter is applied on the content
        .item1
        .item2

article.wow.fadeInDown(data-role='checkbox')
  h1 Checkbox
  p.
    For your forms, you can use checkbox as animated switches using
    your main color scheme.
  figure
    span.checkbox
      label(for='switch') Put it on?
      input(type='checkbox', id='switch', name='switch')
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, checkbox)
    cpCheckbox(bgColor, brandSuccess, brandDanger, brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    span.checkbox
      label(for='switch') Put it on?
      input(type='checkbox', id='switch', name='switch')

article.wow.fadeInDown(data-role='select')
  h1 Select
  p.
    Still for your forms, select are animated and customizable with your main
    color scheme.
  figure
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p.
    We first start by setting a reactive variable as a the content receiver for
    the selected value.
  pre: code.bash.
    meteor add reactive-var
  p <b>Stylus</b> is like every other except that the container is a flexbox.
  pre: code.stylus.
    @import s(basePath, selectCustom)
    cpCheckbox(bgColor, brandSuccess, brandDanger, brandColor)
  p The <b>Jade</b> file isn't a select, it's a custom set of tags:
  pre: code.jade.
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p The <b>Coffee</b> file requires the setup of a reactive var:
  pre: code.coffee.
    Template.others.created = ->
      @rxCivility = new ReactiveVar
      @rxCivility.set ''
      @autorun (computation) =>
        civility = @rxCivility.get()
        unless computation.firstRun
          $selectCustom = @$ '.select-custom'
          $selectCustom.addClass 'filled'
    Template.others.helpers
      selectedCivility: -> Template.instance().rxCivility.get()
      civility: -> ['Mr', 'Mrs', 'Ms', 'Dr']
    Template.others.events
      'click .select-custom li': (e, t) ->
        t.rxCivility.set e.target.textContent

article.wow.fadeInDown(data-role='dot-style')
  h1 Dot navigation styles
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2014/01/21/dot-navigation-styles/', target='_blank') Codrops
  p Subtle navigation effect, these widgets can be used for pagination support or thumbnail preview.
  figure.fillup
    p Fill up
    ul
      each dotExample
        li(class='{{dotActive}}'): a(href='/') Home
  figure.scaleup
    p Scale up
    ul
      each dotExample
        li(class='{{dotActive}}'): a(href='{{link}}')= page
  figure.stroke
    p Stroke
    ul
      each dotExample
        li(class='{{dotActive}}'): a(href='{{link}}')= page
  p The solution relies on a reactive var acting as the content receiver.
  pre: code.bash.
    meteor add reactive-var
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, dotStyle)
    cpDotStyle(bgColor)
    // For using the Fill up plugin
    cpDotStyleFillup(brandColor, bgColor)
    // For using the Scale up plugin
    cpDotStyleScaleup(brandColor, bgColor)
    // For using the Stroke plugin
    cpDotStyleStroke(brandColor, bgColor)
  p
    | Usage in <b>Jade</b> relies on exposed helpers. Note that the active dot
    |Â navigation style is set with an <code>active</code> class.
  pre: code.jade.
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p The <b>Coffee</b> file requires the setup of a reactive var:
  pre: code.coffee.
    Template.myPage.created = ->
      @rxActiveDot = new ReactiveVar
    Template.myPage.helpers
      dotExample: -> [
        {id: 1, link: '/', page: 'Home' }
        {id: 2, link: '/', page: 'Buttons' }
        {id: 3, link: '/', page: 'Text inputs' }
        {id: 4, link: '/', page: 'Off screens' }
        {id: 5, link: '/', page: 'Others' }
      ]
      dotActive: -> 'active' if Template.instance().rxActiveDot.get() is @id
    Template.myPage.events
      'click [data-role=\'dot-style\'] a': (e, t) ->
        e.preventDefault()
        t.rxActiveDot.set @id
